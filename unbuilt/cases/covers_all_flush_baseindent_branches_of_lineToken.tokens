Branch 1: size - @indebt is @indent, indentation was kept same
Branch 1.2: newNoewLines is false, so just return
Branch 1: size - @indebt is @indent, indentation was kept same
Branch 1.1: noNewLines is true, so suppressNewLines
Branch 2: indentation is not kept same
Branch 5: size is not > @indent, and size is not < @baseIndent. Make an OUTDENT token
Branch 1: size - @indebt is @indent, indentation was kept same
Branch 1.2: newNoewLines is false, so just return
Branch 2: indentation is not kept same
Branch 3: size of new indent is > previous indent, we've indented further
Branch 3.2: noNewLines is false
Branch 3.4: there are some tokens already, so make an INDENT token
Branch 2: indentation is not kept same
Branch 3: size of new indent is > previous indent, we've indented further
Branch 3.2: noNewLines is false
Branch 3.4: there are some tokens already, so make an INDENT token
Branch 2: indentation is not kept same
Branch 3: size of new indent is > previous indent, we've indented further
Branch 3.2: noNewLines is false
Branch 3.4: there are some tokens already, so make an INDENT token
Branch 2: indentation is not kept same
Branch 5: size is not > @indent, and size is not < @baseIndent. Make an OUTDENT token
[NUMBER 1] [+ +] [NUMBER 1] [TERMINATOR \n] [NUMBER 1] [+ +] [NUMBER 2] [TERMINATOR \n] [NUMBER 42] [+ +] [NUMBER 3] [INDENT 19] [IDENTIFIER crazy] [INDENT 15] [IDENTIFIER stuff] [INDENT 30] [IDENTIFIER going] [CALL_START (] [IDENTIFIER down] [CALL_END )] [OUTDENT 8] [TERMINATOR \n] [IDENTIFIER even] [CALL_START (] [IDENTIFIER a] [CALL_START (] [IDENTIFIER little] [CALL_START (] [IDENTIFIER outdenting] [CALL_END )] [CALL_END )] [CALL_END )] [OUTDENT 41] [OUTDENT 19] [TERMINATOR \n]
