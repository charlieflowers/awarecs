[IDENTIFIER exports] [. .] [IDENTIFIER starts] [= =] [PARAM_START (] [IDENTIFIER string] [, ,] [IDENTIFIER literal] [, ,] [IDENTIFIER start] [PARAM_END )] [-> ->] [INDENT 2] [IDENTIFIER literal] [COMPARE ==] [IDENTIFIER string] [. .] [IDENTIFIER substr] [CALL_START (] [IDENTIFIER start] [, ,] [IDENTIFIER literal] [. .] [IDENTIFIER length] [CALL_END )] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER ends] [= =] [PARAM_START (] [IDENTIFIER string] [, ,] [IDENTIFIER literal] [, ,] [IDENTIFIER back] [PARAM_END )] [-> ->] [INDENT 2] [IDENTIFIER len] [= =] [IDENTIFIER literal] [. .] [IDENTIFIER length] [TERMINATOR \n] [IDENTIFIER literal] [COMPARE ==] [IDENTIFIER string] [. .] [IDENTIFIER substr] [CALL_START (] [IDENTIFIER string] [. .] [IDENTIFIER length] [- -] [IDENTIFIER len] [- -] [( (] [IDENTIFIER back] [LOGIC ||] [NUMBER 0] [) )] [, ,] [IDENTIFIER len] [CALL_END )] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER repeat] [= =] [IDENTIFIER repeat] [= =] [PARAM_START (] [IDENTIFIER str] [, ,] [IDENTIFIER n] [PARAM_END )] [-> ->] [INDENT 2] [IDENTIFIER res] [= =] [STRING ''] [TERMINATOR \n] [WHILE while] [IDENTIFIER n] [COMPARE >] [NUMBER 0] [INDENT 2] [IDENTIFIER res] [COMPOUND_ASSIGN +=] [IDENTIFIER str] [POST_IF if] [IDENTIFIER n] [LOGIC &] [NUMBER 1] [TERMINATOR \n] [IDENTIFIER n] [COMPOUND_ASSIGN >>>=] [NUMBER 1] [TERMINATOR \n] [IDENTIFIER str] [COMPOUND_ASSIGN +=] [IDENTIFIER str] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER res] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER compact] [= =] [PARAM_START (] [IDENTIFIER array] [PARAM_END )] [-> ->] [INDENT 2] [IDENTIFIER item] [FOR for] [IDENTIFIER item] [FORIN in] [IDENTIFIER array] [WHEN when] [IDENTIFIER item] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER count] [= =] [PARAM_START (] [IDENTIFIER string] [, ,] [IDENTIFIER substr] [PARAM_END )] [-> ->] [INDENT 2] [IDENTIFIER num] [= =] [IDENTIFIER pos] [= =] [NUMBER 0] [TERMINATOR \n] [RETURN return] [NUMBER 1] [MATH /] [NUMBER 0] [POST_IF unless] [IDENTIFIER substr] [. .] [IDENTIFIER length] [TERMINATOR \n] [IDENTIFIER num] [++ ++] [WHILE while] [IDENTIFIER pos] [= =] [NUMBER 1] [+ +] [IDENTIFIER string] [. .] [IDENTIFIER indexOf] [CALL_START (] [IDENTIFIER substr] [, ,] [IDENTIFIER pos] [CALL_END )] [TERMINATOR \n] [IDENTIFIER num] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER merge] [= =] [PARAM_START (] [IDENTIFIER options] [, ,] [IDENTIFIER overrides] [PARAM_END )] [-> ->] [INDENT 2] [IDENTIFIER extend] [CALL_START (] [( (] [IDENTIFIER extend] [CALL_START (] [{ {] [} }] [, ,] [IDENTIFIER options] [CALL_END )] [) )] [, ,] [IDENTIFIER overrides] [CALL_END )] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER extend] [= =] [IDENTIFIER exports] [. .] [IDENTIFIER extend] [= =] [PARAM_START (] [IDENTIFIER object] [, ,] [IDENTIFIER properties] [PARAM_END )] [-> ->] [INDENT 2] [FOR for] [IDENTIFIER key] [, ,] [IDENTIFIER val] [FOROF of] [IDENTIFIER properties] [INDENT 2] [IDENTIFIER object] [INDEX_START [] [IDENTIFIER key] [INDEX_END ]] [= =] [IDENTIFIER val] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER object] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER flatten] [= =] [IDENTIFIER flatten] [= =] [PARAM_START (] [IDENTIFIER array] [PARAM_END )] [-> ->] [INDENT 2] [IDENTIFIER flattened] [= =] [[ [] [] ]] [TERMINATOR \n] [FOR for] [IDENTIFIER element] [FORIN in] [IDENTIFIER array] [INDENT 2] [IF if] [IDENTIFIER element] [RELATION instanceof] [IDENTIFIER Array] [INDENT 2] [IDENTIFIER flattened] [= =] [IDENTIFIER flattened] [. .] [IDENTIFIER concat] [CALL_START (] [IDENTIFIER flatten] [CALL_START (] [IDENTIFIER element] [CALL_END )] [CALL_END )] [OUTDENT 2] [ELSE else] [INDENT 2] [IDENTIFIER flattened] [. .] [IDENTIFIER push] [CALL_START (] [IDENTIFIER element] [CALL_END )] [OUTDENT 4] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER flattened] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER del] [= =] [PARAM_START (] [IDENTIFIER obj] [, ,] [IDENTIFIER key] [PARAM_END )] [-> ->] [INDENT 2] [IDENTIFIER val] [= =] [IDENTIFIER obj] [INDEX_START [] [IDENTIFIER key] [INDEX_END ]] [TERMINATOR \n] [UNARY delete] [IDENTIFIER obj] [INDEX_START [] [IDENTIFIER key] [INDEX_END ]] [TERMINATOR \n] [IDENTIFIER val] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER last] [= =] [IDENTIFIER last] [= =] [PARAM_START (] [IDENTIFIER array] [, ,] [IDENTIFIER back] [PARAM_END )] [-> ->] [INDENT 2] [IDENTIFIER array] [INDEX_START [] [IDENTIFIER array] [. .] [IDENTIFIER length] [- -] [( (] [IDENTIFIER back] [LOGIC ||] [NUMBER 0] [) )] [- -] [NUMBER 1] [INDEX_END ]] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER some] [= =] [IDENTIFIER Array] [:: ::] [IDENTIFIER some] [LOGIC ?] [PARAM_START (] [IDENTIFIER fn] [PARAM_END )] [-> ->] [INDENT 2] [RETURN return] [BOOL true] [FOR for] [IDENTIFIER e] [FORIN in] [THIS this] [WHEN when] [IDENTIFIER fn] [CALL_START (] [IDENTIFIER e] [CALL_END )] [TERMINATOR \n] [BOOL false] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER invertLiterate] [= =] [PARAM_START (] [IDENTIFIER code] [PARAM_END )] [-> ->] [INDENT 2] [IDENTIFIER maybe_code] [= =] [BOOL true] [TERMINATOR \n] [IDENTIFIER lines] [= =] [FOR for] [IDENTIFIER line] [FORIN in] [IDENTIFIER code] [. .] [IDENTIFIER split] [CALL_START (] [STRING '\n'] [CALL_END )] [INDENT 2] [IF if] [IDENTIFIER maybe_code] [LOGIC &&] [REGEX /^([ ]{4}|[ ]{0,3}\t)/] [. .] [IDENTIFIER test] [CALL_START (] [IDENTIFIER line] [CALL_END )] [INDENT 2] [IDENTIFIER line] [OUTDENT 2] [ELSE else] [IF if] [IDENTIFIER maybe_code] [= =] [REGEX /^\s*$/] [. .] [IDENTIFIER test] [CALL_START (] [IDENTIFIER line] [CALL_END )] [INDENT 2] [IDENTIFIER line] [OUTDENT 2] [ELSE else] [INDENT 2] [STRING '# '] [+ +] [IDENTIFIER line] [OUTDENT 4] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER lines] [. .] [IDENTIFIER join] [CALL_START (] [STRING '\n'] [CALL_END )] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER buildLocationData] [= =] [PARAM_START (] [IDENTIFIER first] [, ,] [IDENTIFIER last] [PARAM_END )] [-> ->] [INDENT 2] [IF if] [UNARY !] [IDENTIFIER last] [INDENT 2] [IDENTIFIER first] [OUTDENT 2] [ELSE else] [INDENT 2] [{ {,] [IDENTIFIER first_line] [: :] [IDENTIFIER first] [. .] [IDENTIFIER first_line] [TERMINATOR \n] [IDENTIFIER first_column] [: :] [IDENTIFIER first] [. .] [IDENTIFIER first_column] [TERMINATOR \n] [IDENTIFIER last_line] [: :] [IDENTIFIER last] [. .] [IDENTIFIER last_line] [TERMINATOR \n] [IDENTIFIER last_column] [: :] [IDENTIFIER last] [. .] [IDENTIFIER last_column] [} }] [OUTDENT 4] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER addLocationDataFn] [= =] [PARAM_START (] [IDENTIFIER first] [, ,] [IDENTIFIER last] [PARAM_END )] [-> ->] [INDENT 2] [PARAM_START (] [IDENTIFIER obj] [PARAM_END )] [-> ->] [INDENT 2] [IF if] [( (] [( (] [UNARY typeof] [IDENTIFIER obj] [) )] [COMPARE ==] [STRING 'object'] [) )] [LOGIC &&] [( (] [UNARY_MATH !] [UNARY_MATH !] [IDENTIFIER obj] [INDEX_START [] [STRING 'updateLocationDataIfMissing'] [INDEX_END ]] [) )] [INDENT 2] [IDENTIFIER obj] [. .] [IDENTIFIER updateLocationDataIfMissing] [CALL_START (] [IDENTIFIER buildLocationData] [CALL_START (] [IDENTIFIER first] [, ,] [IDENTIFIER last] [CALL_END )] [CALL_END )] [OUTDENT 2] [TERMINATOR \n] [RETURN return] [IDENTIFIER obj] [OUTDENT 4] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER locationDataToString] [= =] [PARAM_START (] [IDENTIFIER obj] [PARAM_END )] [-> ->] [INDENT 2] [IF if] [( (] [STRING "2"] [RELATION of] [IDENTIFIER obj] [) )] [LOGIC &&] [( (] [STRING "first_line"] [RELATION of] [IDENTIFIER obj] [INDEX_START [] [NUMBER 2] [INDEX_END ]] [) )] [INDENT 2] [IDENTIFIER locationData] [= =] [IDENTIFIER obj] [INDEX_START [] [NUMBER 2] [INDEX_END ]] [OUTDENT 2] [ELSE else] [IF if] [STRING "first_line"] [RELATION of] [IDENTIFIER obj] [INDENT 2] [IDENTIFIER locationData] [= =] [IDENTIFIER obj] [OUTDENT 2] [TERMINATOR \n] [IF if] [IDENTIFIER locationData] [INDENT 2] [( (] [STRING ""] [+ +] [( (] [IDENTIFIER locationData] [. .] [IDENTIFIER first_line] [+ +] [NUMBER 1] [) )] [+ +] [STRING ":"] [+ +] [( (] [IDENTIFIER locationData] [. .] [IDENTIFIER first_column] [+ +] [NUMBER 1] [) )] [+ +] [STRING "-"] [) )] [+ +] [( (] [STRING ""] [+ +] [( (] [IDENTIFIER locationData] [. .] [IDENTIFIER last_line] [+ +] [NUMBER 1] [) )] [+ +] [STRING ":"] [+ +] [( (] [IDENTIFIER locationData] [. .] [IDENTIFIER last_column] [+ +] [NUMBER 1] [) )] [) )] [OUTDENT 2] [ELSE else] [INDENT 2] [STRING "No location data"] [OUTDENT 4] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER baseFileName] [= =] [PARAM_START (] [IDENTIFIER file] [, ,] [IDENTIFIER stripExt] [= =] [BOOL false] [, ,] [IDENTIFIER useWinPathSep] [= =] [BOOL false] [PARAM_END )] [-> ->] [INDENT 2] [IDENTIFIER pathSep] [= =] [IF if] [IDENTIFIER useWinPathSep] [INDENT 2] [REGEX /\\|\//] [OUTDENT 2] [ELSE else] [INDENT 2] [REGEX /\//] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER parts] [= =] [IDENTIFIER file] [. .] [IDENTIFIER split] [CALL_START (] [IDENTIFIER pathSep] [CALL_END )] [TERMINATOR \n] [IDENTIFIER file] [= =] [IDENTIFIER parts] [INDEX_START [] [IDENTIFIER parts] [. .] [IDENTIFIER length] [- -] [NUMBER 1] [INDEX_END ]] [TERMINATOR \n] [RETURN return] [IDENTIFIER file] [POST_IF unless] [IDENTIFIER stripExt] [LOGIC &&] [IDENTIFIER file] [. .] [IDENTIFIER indexOf] [CALL_START (] [STRING '.'] [CALL_END )] [COMPARE >=] [NUMBER 0] [TERMINATOR \n] [IDENTIFIER parts] [= =] [IDENTIFIER file] [. .] [IDENTIFIER split] [CALL_START (] [STRING '.'] [CALL_END )] [TERMINATOR \n] [IDENTIFIER parts] [. .] [IDENTIFIER pop] [CALL_START (] [CALL_END )] [TERMINATOR \n] [IDENTIFIER parts] [. .] [IDENTIFIER pop] [CALL_START (] [CALL_END )] [POST_IF if] [IDENTIFIER parts] [INDEX_START [] [IDENTIFIER parts] [. .] [IDENTIFIER length] [- -] [NUMBER 1] [INDEX_END ]] [COMPARE ==] [STRING 'coffee'] [LOGIC &&] [IDENTIFIER parts] [. .] [IDENTIFIER length] [COMPARE >] [NUMBER 1] [TERMINATOR \n] [IDENTIFIER parts] [. .] [IDENTIFIER join] [CALL_START (] [STRING '.'] [CALL_END )] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER isCoffee] [= =] [PARAM_START (] [IDENTIFIER file] [PARAM_END )] [-> ->] [INDENT 2] [REGEX /\.((lit)?coffee|coffee\.md)$/] [. .] [IDENTIFIER test] [CALL_START (] [IDENTIFIER file] [CALL_END )] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER isLiterate] [= =] [PARAM_START (] [IDENTIFIER file] [PARAM_END )] [-> ->] [INDENT 2] [REGEX /\.(litcoffee|coffee\.md)$/] [. .] [IDENTIFIER test] [CALL_START (] [IDENTIFIER file] [CALL_END )] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER throwSyntaxError] [= =] [PARAM_START (] [IDENTIFIER message] [, ,] [IDENTIFIER location] [PARAM_END )] [-> ->] [INDENT 2] [IDENTIFIER error] [= =] [UNARY new] [IDENTIFIER SyntaxError] [CALL_START (] [IDENTIFIER message] [CALL_END )] [TERMINATOR \n] [IDENTIFIER error] [. .] [IDENTIFIER location] [= =] [IDENTIFIER location] [TERMINATOR \n] [IDENTIFIER error] [. .] [IDENTIFIER toString] [= =] [IDENTIFIER syntaxErrorToString] [TERMINATOR \n] [IDENTIFIER error] [. .] [IDENTIFIER stack] [= =] [IDENTIFIER error] [. .] [IDENTIFIER toString] [CALL_START (] [CALL_END )] [TERMINATOR \n] [THROW throw] [IDENTIFIER error] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER updateSyntaxError] [= =] [PARAM_START (] [IDENTIFIER error] [, ,] [IDENTIFIER code] [, ,] [IDENTIFIER filename] [PARAM_END )] [-> ->] [INDENT 2] [IF if] [IDENTIFIER error] [. .] [IDENTIFIER toString] [COMPARE ==] [IDENTIFIER syntaxErrorToString] [INDENT 2] [IDENTIFIER error] [. .] [IDENTIFIER code] [COMPOUND_ASSIGN ||=] [IDENTIFIER code] [TERMINATOR \n] [IDENTIFIER error] [. .] [IDENTIFIER filename] [COMPOUND_ASSIGN ||=] [IDENTIFIER filename] [TERMINATOR \n] [IDENTIFIER error] [. .] [IDENTIFIER stack] [= =] [IDENTIFIER error] [. .] [IDENTIFIER toString] [CALL_START (] [CALL_END )] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER error] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER syntaxErrorToString] [= =] [-> ->] [INDENT 2] [RETURN return] [IDENTIFIER Error] [:: ::] [IDENTIFIER toString] [. .] [IDENTIFIER call] [CALL_START (] [@ @] [CALL_END )] [POST_IF unless] [@ @] [IDENTIFIER code] [LOGIC &&] [@ @] [IDENTIFIER location] [TERMINATOR \n] [{ {] [IDENTIFIER first_line] [, ,] [IDENTIFIER first_column] [, ,] [IDENTIFIER last_line] [, ,] [IDENTIFIER last_column] [} }] [= =] [@ @] [IDENTIFIER location] [TERMINATOR \n] [IDENTIFIER last_line] [COMPOUND_ASSIGN ?=] [IDENTIFIER first_line] [TERMINATOR \n] [IDENTIFIER last_column] [COMPOUND_ASSIGN ?=] [IDENTIFIER first_column] [TERMINATOR \n] [IDENTIFIER filename] [= =] [@ @] [IDENTIFIER filename] [LOGIC ||] [STRING '[stdin]'] [TERMINATOR \n] [IDENTIFIER codeLine] [= =] [@ @] [IDENTIFIER code] [. .] [IDENTIFIER split] [CALL_START (] [STRING '\n'] [CALL_END )] [INDEX_START [] [IDENTIFIER first_line] [INDEX_END ]] [TERMINATOR \n] [IDENTIFIER start] [= =] [IDENTIFIER first_column] [TERMINATOR \n] [IDENTIFIER end] [= =] [IF if] [IDENTIFIER first_line] [COMPARE ==] [IDENTIFIER last_line] [INDENT 2] [IDENTIFIER last_column] [+ +] [NUMBER 1] [OUTDENT 2] [ELSE else] [INDENT 2] [IDENTIFIER codeLine] [. .] [IDENTIFIER length] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER marker] [= =] [IDENTIFIER repeat] [CALL_START (] [STRING ' '] [, ,] [IDENTIFIER start] [CALL_END )] [+ +] [IDENTIFIER repeat] [CALL_START (] [STRING '^'] [, ,] [IDENTIFIER end] [- -] [IDENTIFIER start] [CALL_END )] [TERMINATOR \n] [IF if] [IDENTIFIER process] [? ?] [INDENT 2] [IDENTIFIER colorsEnabled] [= =] [IDENTIFIER process] [. .] [IDENTIFIER stdout] [. .] [IDENTIFIER isTTY] [LOGIC &&] [UNARY !] [IDENTIFIER process] [. .] [IDENTIFIER env] [. .] [IDENTIFIER NODE_DISABLE_COLORS] [OUTDENT 2] [TERMINATOR \n] [IF if] [@ @] [IDENTIFIER colorful] [LOGIC ?] [IDENTIFIER colorsEnabled] [INDENT 2] [IDENTIFIER colorize] [= =] [PARAM_START (] [IDENTIFIER str] [PARAM_END )] [-> ->] [INDENT 2] [( (] [STRING "\x1B[1;31m"] [+ +] [IDENTIFIER str] [+ +] [STRING "\x1B[0m"] [) )] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER codeLine] [= =] [IDENTIFIER codeLine] [INDEX_START [] [... ...] [IDENTIFIER start] [INDEX_END ]] [+ +] [IDENTIFIER colorize] [CALL_START (] [IDENTIFIER codeLine] [INDEX_START [] [IDENTIFIER start] [... ...] [IDENTIFIER end] [INDEX_END ]] [CALL_END )] [+ +] [IDENTIFIER codeLine] [INDEX_START [] [IDENTIFIER end] [.. ..] [INDEX_END ]] [TERMINATOR \n] [IDENTIFIER marker] [= =] [IDENTIFIER colorize] [CALL_START (] [IDENTIFIER marker] [CALL_END )] [OUTDENT 2] [TERMINATOR \n] [( (] [STRING ""] [+ +] [IDENTIFIER filename] [+ +] [STRING ":"] [+ +] [( (] [IDENTIFIER first_line] [+ +] [NUMBER 1] [) )] [+ +] [STRING ":"] [+ +] [( (] [IDENTIFIER first_column] [+ +] [NUMBER 1] [) )] [+ +] [STRING ": error: "] [+ +] [( (] [@ @] [IDENTIFIER message] [) )] [+ +] [STRING "\n"] [+ +] [IDENTIFIER codeLine] [+ +] [STRING "\n"] [+ +] [IDENTIFIER marker] [) )] [OUTDENT 2] [TERMINATOR \n] [IDENTIFIER exports] [. .] [IDENTIFIER nameWhitespaceCharacter] [= =] [PARAM_START (] [IDENTIFIER string] [PARAM_END )] [-> ->] [INDENT 2] [SWITCH switch] [IDENTIFIER string] [INDENT 2] [LEADING_WHEN when] [STRING ' '] [INDENT 2] [STRING 'space'] [OUTDENT 2] [TERMINATOR \n] [LEADING_WHEN when] [STRING '\n'] [INDENT 2] [STRING 'newline'] [OUTDENT 2] [TERMINATOR \n] [LEADING_WHEN when] [STRING '\r'] [INDENT 2] [STRING 'carriage return'] [OUTDENT 2] [TERMINATOR \n] [LEADING_WHEN when] [STRING '\t'] [INDENT 2] [STRING 'tab'] [OUTDENT 2] [ELSE else] [INDENT 2] [IDENTIFIER string] [OUTDENT 2] [OUTDENT 4] [OUTDENT 2] [TERMINATOR \n]
